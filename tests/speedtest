#!/usr/bin/env php
<?php
/**
 * This script will run the algorithms through performance tests
 *
 * It will load a specimens array containing thousands of test inputs to then
 * put each algorithm through its paces and report the time it took
 */

require_once __DIR__ . '/../vendor/autoload.php';

use Challenge018\InterfaceAlgorithm;
use Challenge018\AlgorithmSubstr;
use Challenge018\AlgorithmTimestamps;
use Challenge018\AlgorithmModulus;
use Challenge018\AlgorithmCfeinSplit;
use Challenge018\AlgorithmCfeinMod;
use Challenge018\AlgorithmJsexton;
use Challenge018\AlgorithmMseemann;
use Challenge018\AlgorithmNmallare;
use Challenge018\AlgorithmTnelson1;
use Challenge018\AlgorithmTnelson2;
use Challenge018\AlgorithmJedstrom;

$specimens = require 'specimens.php';

// Set up samples (specimen pairs)
$samples = [];
$len = count($specimens);
for ($i = 0; $i < $len - 1; $i+=2) {
    $samples[] = [$specimens[$i], $specimens[$i + 1]];
}

//shuffle($samples);

$algorithms = [
    'AlgorithmJpriceTime' => new AlgorithmTimestamps(),
    'AlgorithmJpSubstr' => new AlgorithmSubstr(),
    'AlgorithmJpModulus' => new AlgorithmModulus(),
    'AlgorithmCfeinSplit' => new AlgorithmCfeinSplit(),
    'AlgorithmCfeinMod' => new AlgorithmCfeinMod(),
    'AlgorithmJsexton' => new AlgorithmJsexton(),
    'AlgorithmMseemann' => new AlgorithmMseemann(),
    'AlgorithmNmallare' => new AlgorithmNmallare(),
    'AlgorithmTnelson1' => new AlgorithmTnelson1(),
    'AlgorithmTnelson2' => new AlgorithmTnelson2(),
    'AlgorithmJedstrom' => new AlgorithmJedstrom(),
];

$results = [];

/**
 * Test an algorithm
 *
 * This will test an algorithm and time it
 *
 * @param string $name Name of algorithm
 * @param object $algorithm Algorithm object
 * @param array $samples Array of samples use as inputs for test
 * @return null
 */
function testAlgorithm($name, InterfaceAlgorithm $algorithm, $samples, &$results)
{
    $len = count($samples);

    $startTime = microtime(true);

    for ($i = 0; $i < $len; $i++) {
        $result = $algorithm->compareDates($samples[$i][0], $samples[$i][1]);
    }

    $endTime = microtime(true);
    $diff = $endTime - $startTime;

    $results[] = ['name' => $name, 'time' => $diff, 'calcsPerSecond' => $len / $diff];
    //printf("  '%s'\t\t%0.6f seconds\t%d per second\n", $name, $diff, $len / $diff);
}

printf("Testing algorithms with %s samples\n", count($samples));
foreach ($algorithms as $name => $algorithm) {
    testAlgorithm($name, $algorithm, $samples, $results);
}

usort($results, function($a, $b) {
    return $a['time'] < $b['time'];
});

foreach ($results as $result) {
    printf("%s\t\t%0.6f seconds\t%d per second\n", $result['name'], $result['time'], $result['calcsPerSecond']);
}
